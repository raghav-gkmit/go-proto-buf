// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/bank/service.proto

package bank

import (
	context "context"
	_type "github.com/raghav-gkmit/go-proto-buf/protogen/go/bank/type"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BankService_GetCurrentBalance_FullMethodName = "/bank.BankService/GetCurrentBalance"
	BankService_GetExchangeRate_FullMethodName   = "/bank.BankService/GetExchangeRate"
)

// BankServiceClient is the client API for BankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankServiceClient interface {
	GetCurrentBalance(ctx context.Context, in *_type.CurrentBalanceRequest, opts ...grpc.CallOption) (*_type.CurrentBalanceResponse, error)
	GetExchangeRate(ctx context.Context, in *_type.ExchangeRateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[_type.ExchangeRateResponse], error)
}

type bankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankServiceClient(cc grpc.ClientConnInterface) BankServiceClient {
	return &bankServiceClient{cc}
}

func (c *bankServiceClient) GetCurrentBalance(ctx context.Context, in *_type.CurrentBalanceRequest, opts ...grpc.CallOption) (*_type.CurrentBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_type.CurrentBalanceResponse)
	err := c.cc.Invoke(ctx, BankService_GetCurrentBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) GetExchangeRate(ctx context.Context, in *_type.ExchangeRateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[_type.ExchangeRateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BankService_ServiceDesc.Streams[0], BankService_GetExchangeRate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[_type.ExchangeRateRequest, _type.ExchangeRateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BankService_GetExchangeRateClient = grpc.ServerStreamingClient[_type.ExchangeRateResponse]

// BankServiceServer is the server API for BankService service.
// All implementations must embed UnimplementedBankServiceServer
// for forward compatibility.
type BankServiceServer interface {
	GetCurrentBalance(context.Context, *_type.CurrentBalanceRequest) (*_type.CurrentBalanceResponse, error)
	GetExchangeRate(*_type.ExchangeRateRequest, grpc.ServerStreamingServer[_type.ExchangeRateResponse]) error
	mustEmbedUnimplementedBankServiceServer()
}

// UnimplementedBankServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBankServiceServer struct{}

func (UnimplementedBankServiceServer) GetCurrentBalance(context.Context, *_type.CurrentBalanceRequest) (*_type.CurrentBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentBalance not implemented")
}
func (UnimplementedBankServiceServer) GetExchangeRate(*_type.ExchangeRateRequest, grpc.ServerStreamingServer[_type.ExchangeRateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetExchangeRate not implemented")
}
func (UnimplementedBankServiceServer) mustEmbedUnimplementedBankServiceServer() {}
func (UnimplementedBankServiceServer) testEmbeddedByValue()                     {}

// UnsafeBankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankServiceServer will
// result in compilation errors.
type UnsafeBankServiceServer interface {
	mustEmbedUnimplementedBankServiceServer()
}

func RegisterBankServiceServer(s grpc.ServiceRegistrar, srv BankServiceServer) {
	// If the following call pancis, it indicates UnimplementedBankServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BankService_ServiceDesc, srv)
}

func _BankService_GetCurrentBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_type.CurrentBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).GetCurrentBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_GetCurrentBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).GetCurrentBalance(ctx, req.(*_type.CurrentBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_GetExchangeRate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(_type.ExchangeRateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BankServiceServer).GetExchangeRate(m, &grpc.GenericServerStream[_type.ExchangeRateRequest, _type.ExchangeRateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BankService_GetExchangeRateServer = grpc.ServerStreamingServer[_type.ExchangeRateResponse]

// BankService_ServiceDesc is the grpc.ServiceDesc for BankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bank.BankService",
	HandlerType: (*BankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentBalance",
			Handler:    _BankService_GetCurrentBalance_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetExchangeRate",
			Handler:       _BankService_GetExchangeRate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/bank/service.proto",
}
